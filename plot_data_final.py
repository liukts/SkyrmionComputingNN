import numpy as np
import matplotlib.pyplot as plt

dir = './context/'
base = np.load(dir + '220719_mnist_ann_nothing_lr0.01/accuracies.npy')
ann = np.load(dir + '220719_mnist_ann_base_lr0.01/accuracies.npy')
direct = np.load(dir + '220719_mnist_ann_direct_lr0.01/accuracies.npy')
cont0 = np.load(dir + '220719_mnist_ann_context_lr0.01/accuracies.npy')
cont1 = np.load(dir + '220719_mnist_ann_context_dummy_lr0.01/accuracies.npy')
# cont2 = np.load(dir + '0920_tskone_context_lr0.3_dummy2/accuracies.npy')
# cont3 = np.load(dir + '0920_tskone_context_lr0.4_dummy3/accuracies.npy')
# cont4 = np.load(dir + '0920_tskone_context_lr0.5_dummy4/accuracies.npy')

ann_avg = np.mean(ann,axis=0)
ann_err = np.std(ann,axis=0)
base_avg = np.mean(base,axis=0)
base_err = np.std(base,axis=0)
direct_avg = np.mean(direct,axis=0)
direct_err = np.std(direct,axis=0)
cont0_avg = np.mean(cont0,axis=0)
cont0_err = np.std(cont0,axis=0)
cont1_avg = np.mean(cont1,axis=0)
cont1_err = np.std(cont1,axis=0)
# cont2_avg = np.mean(cont2,axis=0)
# cont2_err = np.std(cont2,axis=0)
# cont3_avg = np.mean(cont3,axis=0)
# cont3_err = np.std(cont3,axis=0)
# cont4_avg = np.mean(cont4,axis=0)
# cont4_err = np.std(cont4,axis=0)
epochs = np.linspace(1,len(base_avg),len(base_avg))

# plot 1
# plt.figure()
# plt.plot(base_avg,color='tab:blue')
# plt.fill_between(epochs,base_avg-base_err,base_avg+base_err,color='tab:blue',alpha=0.3)
# # plt.plot(direct_avg,color='tab:orange')
# # plt.fill_between(epochs,direct_avg-direct_err,direct_avg+direct_err,color='tab:orange',alpha=0.3)
# plt.plot(cont0_avg,color='tab:green')
# plt.fill_between(epochs,cont0_avg-cont0_err,cont0_avg+cont0_err,color='tab:green',alpha=0.3)
# plt.ylim([50,100])
# plt.legend(['Baseline lr=2.0','Contextual lr=0.1'])
# plt.xlabel('Epochs')
# plt.ylabel('Validation accuracy (%)')
# plt.grid()
# plt.savefig('plot1_acc.png')

# plot 3
plt.figure()
plt.plot(epochs,ann_avg,'^-')
plt.plot(epochs,base_avg,'^-')
plt.plot(epochs,direct_avg,'^-')
plt.plot(epochs,cont0_avg,'^-')
plt.plot(epochs,cont1_avg,'^-')
plt.fill_between(epochs,ann_avg-ann_err,ann_avg+ann_err,alpha=0.3)
plt.fill_between(epochs,base_avg-base_err,base_avg+base_err,alpha=0.3)
plt.fill_between(epochs,direct_avg-direct_err,direct_avg+direct_err,alpha=0.3)
plt.fill_between(epochs,cont0_avg-cont0_err,cont0_avg+cont0_err,alpha=0.3)
plt.fill_between(epochs,cont1_avg-cont1_err,cont1_avg+cont1_err,alpha=0.3)
# plt.plot(cont2_avg,color='seagreen')
# plt.fill_between(epochs,cont2_avg-cont2_err,cont2_avg+cont2_err,color='seagreen',alpha=0.3)
# plt.plot(cont3_avg,color='mediumseagreen')
# plt.fill_between(epochs,cont3_avg-cont3_err,cont3_avg+cont3_err,color='mediumseagreen',alpha=0.3)
# plt.plot(cont4_avg,color='mediumaquamarine')
# plt.fill_between(epochs,cont4_avg-cont4_err,cont4_avg+cont4_err,color='mediumaquamarine',alpha=0.3)
plt.legend(['ANN','Base','Direct','Context','Context w/ extra neuron'])
plt.xlabel('Epochs')
plt.ylabel('Validation accuracy (%)')
plt.ylim([70,100])
# plt.yscale('log')
# plt.grid()
plt.savefig('plot1_acc.png')